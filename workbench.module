<?php
// $Id$

/**
 * @file
 *   Workbench module file for editorial workspaces.
 *
 * @copyright (C) Copyright 2010 Palantir.net
 */

/**
 * Implements hook_menu().
 */
function workbench_menu() {
  $items = array();

  $items['admin/config/workbench'] = array(
    'title' => 'Workbench',
    'description' => 'Workbench',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access workbench'),
    'position' => 'right',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/workbench/page'] = array(
    'title' => 'My Workbench',
    'description' => 'My Workbench area',
    'page callback' => 'workbench_content',
    'access arguments' => array('access workbench'),
    'weight' => -20,
    'file' => 'workbench.pages.inc',
  );
  /*
  $items['admin/config/workbench/page/overview'] = array(
    'title' => 'Workbench',
    'page callback' => 'workbench_page',
    'access arguments' => array('access workbench'),
    'weight' => -25,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'workbench.pages.inc',
  );*/
  $items['admin/config/workbench/page/content'] = array(
    'title' => 'My content',
    'page callback' => 'workbench_content',
    'access arguments' => array('access workbench'),
    'weight' => -20,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'workbench.pages.inc',
  );
  $items['admin/config/workbench/page/create'] = array(
    'title' => 'Create content',
    'page callback' => 'workbench_create',
    'access arguments' => array('access workbench'),
    'weight' => -15,
    'type' => MENU_LOCAL_TASK,
    'file' => 'workbench.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function workbench_permission() {
  $permissions = array(
    'administer workbench' => array(
      'title' => t('Administer Workbench settings'),
    ),
    'access workbench' => array(
      'title' => t('Access a personal Workbench page'),
    ),
    'view all unpublished content' => array(
      'title' => 'View all unpublished content',
    ),
  );
  return $permissions;
}

/**
 * Implements hook_node_access().
 *
 * Allow users with the 'view all unpublished content' permission to do just that.
 */
function workbench_node_access($node, $op, $account) {
  if ($op == 'view' && !$node->status && user_access('view all unpublished content', $account)) {
    return NODE_ACCESS_ALLOW;
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_views_api().
 */
function workbench_views_api() {
  return array('api' => 2);
}

/**
 * Implements hook_views_default_views().
 */
function workbench_views_default_views() {
  return workbench_load_all_exports('workbench', 'views', 'view.inc', 'view');
}

/**
 * Fetches an array of exportables from files.
 *
 * @param $module
 *   The module invoking this request. (Can be called by other modules.)
 * @param $directory
 *   The subdirectory in the custom module.
 * @param $extension
 *   The file extension.
 * @param $name
 *   The name of the variable found in each file. Defaults to the same as
 *   $extension.
 * @return
 *   Array of $name objects.
 */
function workbench_load_all_exports($module, $directory, $extension, $name = NULL) {
  if (!$name) {
    $name = $extension;
  }

  $return = array();
  // Find all the files in the directory with the correct extension.
  $files = file_scan_directory(drupal_get_path('module', $module) . "/$directory", "/.$extension/");
  foreach ($files as $path => $file) {
    require $path;
    if (isset($$name)) {
      $return[$$name->name] = $$name;
    }
  }

  return $return;
}

/**
 * Implements hook_theme().
 *
 * Provides a theme function for use with the RenderAPI that uses the #title and #attributes
 * properties of a render array, if they're present.
 */
function workbench_theme($existing, $type, $theme, $path) {
  return array(
    'workbench_element' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Generic theme function for use with RenderAPI. Renders the #title and #attributes properties
 * if they are present.
 */
function theme_workbench_element($vars) {
  $element = $vars['element'];

  // Use the #title attribute.
  $title = '';
  if (!empty($element['#title'])) {
    $title = '<h3>' . check_plain($element['#title']) . '</h3>';
  }

  // Use #attributes to customize a wrapper <div>.
  $attributes = '';
  if (!empty($element['#attributes'])) {
    $attributes = drupal_attributes($element['#attributes']);
  }

  // Render any child items.
  if (!$element['#children']) {
    $element['#children'] = drupal_render_children($element);
  }

  // Build simple output.
  $output = "<div{$attributes}>{$title}{$element['#children']}</div>";
  return $output;
}

/**
 * Implements hook_page_alter().
 *
 * Add a pre-render function to the toolbar so that we can add links to it.
 */
function workbench_page_alter(&$page) {
  if (isset($page['page_top']['toolbar']) && module_exists('workbench') && user_access('access workbench')) {
    $page['page_top']['toolbar']['#pre_render'][] = 'workbench_toolbar_pre_render';
  }
}

/**
 * Pre-render function for the toolbar, added in hook_page_alter().
 *
 * Adds a 'My Workbench' link between the 'Hello Username' and 
 * 'Log out' links.
 */
function workbench_toolbar_pre_render($toolbar) {

  //If the #links array does not exist, create it
  if (!isset($toolbar['toolbar_user']['#links'])) {
    $toolbar['toolbar_user']['#links'] = array();
  }

  $links = &$toolbar['toolbar_user']['#links'];
  //Create the workbench link
  $workbench = array(
    'title' => t('My Workbench'),
    'href' => 'admin/config/workbench/page',
  );
  //Assign it to the links array
  $links['workbench'] = $workbench;

  //If the logout link exists, unset it and move it to the end of the links array
  if (isset($links['logout'])) {
    $logout = $links['logout'];
    unset($links['logout']);
    $links['logout'] = $logout;
  }

  return $toolbar;
}
